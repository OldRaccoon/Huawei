/*
题目描述
按照指定规则对输入的字符串进行处理。

详细描述：

将输入的两个字符串合并。

对合并后的字符串进行排序，要求为：下标为奇数的字符和下标为偶数的字符分别从小到大排序。这里的下标意思是字符在字符串中的位置。

对排序后的字符串进行操作，如果字符为‘0’——‘9’或者‘A’——‘F’或者‘a’——‘f’，则对他们所代表的16进制的数进行BIT倒序的操作，并转换为相应的大写字符。如字符为‘4’，为0100b，则翻转后为0010b，也就是2。转换后的字符为‘2’； 如字符为‘7’，为0111b，则翻转后为1110b，也就是e。转换后的字符为大写‘E’。


举例：输入str1为"dec"，str2为"fab"，合并为“decfab”，分别对“dca”和“efb”进行排序，排序后为“abcedf”，转换后为“5D37BF”

接口设计及说明：

/*

功能:字符串处理

输入:两个字符串,需要异常处理

输出:合并处理后的字符串，具体要求参考文档

返回:无

*/

void ProcessString(char* str1,char *str2,char * strOutput)

{

}



输入描述:
输入两个字符串

输出描述:
输出转化后的结果

示例1
输入

dec fab
输出

5D37BF
*/

#include<iostream>
#include<string>
#include<algorithm>
#include<math.h>
using namespace std;


string s1;
string s2;
int main() {
	while (cin >> s1, cin >> s2) {
		string s;
		string s3 = "";
		string s4 = "";
		s = s1 + s2;
		string s5 = "";
		for (int i = 0; i <= s.size() - 1; i += 2) {
			s3 = s3 + s[i];

		}
		for (int i = 1; i <= s.size() - 1; i += 2) {
			s4 = s4 + s[i];

		}

		sort(s3.begin(), s3.end());
		sort(s4.begin(), s4.end());
		for (int i = 0; i <= min(s3.size() - 1, s4.size() - 1); i++) {
			s5 = s5 + s3[i] + s4[i];


		}
		if (s3.size() < s4.size()) { s5 = s5 + s4[s4.size() - 1]; }
		if (s3.size() > s4.size()) { s5 = s5 + s3[s3.size() - 1]; }

		int num; int a1; int a2; int a3; int a4; int b;
		for (int i = 0; i <= s5.size() - 1; i++) {
			if (s5[i] >= '0'&&s5[i] <= '9') {
				num = s5[i] - '0';
				a1 = num % 2;
				a2 = num / 2 % 2;
				a3 = num / 2 / 2 % 2;
				a4 = num / 2 / 2 / 2 % 2;
				b = a4 + 2 * a3 + 4 * a2 + 8 * a1;
				if (b >= 0 && b <= 9) { s5[i] = b + '0'; }
				else if (b >= 10 && b <= 15) { s5[i] = b - 10 + 'A'; }

			}
			else if (s5[i] >= 'A'&&s5[i] <= 'F' || s5[i] >= 'a'&&s5[i] <= 'f') {
				s5[i] = tolower(s5[i]);
				num = s5[i] - 'a' + 10;
				a1 = num % 2;
				a2 = num / 2 % 2;
				a3 = num / 2 / 2 % 2;
				a4 = num / 2 / 2 / 2 % 2;
				b = a4 + 2 * a3 + 4 * a2 + 8 * a1;
				if (b >= 0 && b <= 9) { s5[i] = b + '0'; }
				if (b >= 10 && b <= 15) { s5[i] = b - 10 + 'A'; }

			}
		}
		cout << s5 << endl;

	}
	}
	

