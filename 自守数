/*
题目描述
自守数是指一个数的平方的尾数等于该数自身的自然数。例如：25^2 = 625，76^2 = 5776，9376^2 = 87909376。请求出n以内的自守数的个数


接口说明


/*
功能: 求出n以内的自守数的个数


输入参数：
int n

返回值：
n以内自守数的数量。
*/


public static int CalcAutomorphicNumbers( int n)
{
/*在这里实现功能*/

return 0;
}



输入描述:
int型整数

输出描述:
n以内自守数的数量。

示例1
输入
复制
2000
输出
复制
8
*/

#include<iostream>
#include<string>
#include<algorithm>
#include<math.h>
using namespace std;

int main() {
	int n;
	while (cin >> n) {
		int count = 0;
		for (int i = 1; i <= n; i++) {
			int counti = 1; int sq = i * i;
			int a;
			a = i/10;
			while (a != 0) {
				a = a / 10;
				counti++;
			}
			int wei = 0; int b = 0;int temp;
			while (counti != 0) {
				temp = sq % 10;
				b = b + temp * (int)pow(10, wei);
				sq = sq / 10;
				wei++;
				counti--;
			}
			if (i == b) { count++; }

		}
		cout << count+1 << endl;
	}
}
