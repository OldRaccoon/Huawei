/*题目描述
验证尼科彻斯定理，即：任何一个整数m的立方都可以写成m个连续奇数之和。

例如：

1^3=1 

2^3=3+5 

3^3=7+9+11 

4^3=13+15+17+19 

 

接口说明

原型：


 /*
 功能: 验证尼科彻斯定理，即：任何一个整数m的立方都可以写成m个连续奇数之和。
 原型：
     int GetSequeOddNum(int m,char * pcSequeOddNum);
 输入参数：
     int m：整数(取值范围：1～100)
    
 返回值：
     m个连续奇数(格式：“7+9+11”);
 */

 public String GetSequeOddNum(int m)
 {
     /*在这里实现功能*/

     return null;
 }

 */

 

输入描述:
输入一个int整数

输出描述:
输出分解后的string

示例1
输入
复制
6
输出
复制
31+33+35+37+39+41



#include<iostream>
#include<string>
#include<algorithm>
#include<math.h>
using namespace std;

int a;
int main() {
	while (cin >> a) {
		double x = pow(a, 2);
		int s[101]; int i;
		if ((int)x % 2 == 0) {
			for (i = 0; i <= 100; i++) {
				if (i == 0) {
					s[0] = (int)x - 1 - 2 * (a / 2 - 1);
				}
				else { s[i] = s[0] + 2 * i; }
			}
		}

		if ((int)x % 2 != 0) {
			for (i = 0; i <= 100; i++) {
				if (i == 0) {
					s[0] = (int)x - 2 * (a / 2);
				}
				else { s[i] = s[0] + 2 * i; }
			}
		}
		for (int i = 0; i <= a - 1; i++) {
			if (i <= a - 2) {
				cout << s[i] << "+";
			}
			else { cout << s[i] << endl; }
		}
	
	
	}

}
